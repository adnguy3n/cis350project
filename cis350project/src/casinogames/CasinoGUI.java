package casinogames;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;
import java.awt.Color;

/**
 * Throwaway Prototype for the GUI.
 */
public class CasinoGUI extends JFrame {

	/** Serial Version UID auto generated by Eclipse. */
	private static final long serialVersionUID = 1L;
	/** The JFrame containing everything.*/
	private final JFrame stage;
	/** The panel containing the buttons for play, hit, and stand.*/
	private final JPanel buttonPanel = new JPanel();
	/** JButton for starting a new hand.*/
	private final JButton play = new JButton("Play");
	/** JButton for Hitting. */
	private final JButton hit = new JButton("Hit");
	/** JButton for Standing. */
	private final JButton stand = new JButton("Stand");
	/** JPanel that holds the current score. */
	private final JPanel output = new JPanel();
	/** Blackjack Game Object that contains the logic for the game.*/
	private CasinoGamesBlackJackModel game;
	/** JList that represents the cards in the dealer's hand. */
	private JList<String> dealerHandList;
	/** JList that represents the cards in the player's hand. */
	private JList<String> playerHandList;
	/** Default List Model for the player hand. */
	private DefaultListModel<String> playerHandModel;
	/** Default List Model for the dealer hand. */
	private DefaultListModel<String> dealerHandModel;
	/** Integer counter for the number of player wins. */
	private int playerWinCount;
	/** Integer counter for the number of dealer wins. */
	private int dealerWinCount;
	/** Label for the Player Win Count. */
	private final JLabel playerWinCountLbl = new JLabel("Player Wins: 0");
	/** Label for the dealer win count. */
	private final JLabel dealerWinCountLbl = new JLabel("Dealer Wins: 0");
	/** Label for the hand value of the player. */
	private final JLabel playerValueLbl = new JLabel("0");
	/** Label for the hand value of the dealer. */
	private final JLabel dealerValueLbl = new JLabel("0");
	
	/**
	 * Construction of the JFrame.
	 */
	public CasinoGUI() {
		game = new CasinoGamesBlackJackModel(1);
		stage = new JFrame();
		stage.setSize(new Dimension(700, 400));
		stage.setTitle("BlackJack");
		stage.getContentPane().setLayout(null);
		buttonPanel.setBounds(0, 328, 684, 33);
		stage.getContentPane().add(buttonPanel);
		output.setBounds(0, 0, 684, 32);
		stage.getContentPane().add(output);
		output.setLayout(null);
		playerWinCountLbl.setHorizontalAlignment(SwingConstants.CENTER);
		playerWinCountLbl.setBounds(24, 11, 162, 14);
		
		output.add(playerWinCountLbl);
		dealerWinCountLbl.setHorizontalAlignment(SwingConstants.CENTER);
		dealerWinCountLbl.setBounds(497, 11, 162, 14);
		
		output.add(dealerWinCountLbl);
		
		playerHandList = new JList<String>();
		playerHandList.setBorder(new LineBorder(new Color(0, 0, 0)));
		playerHandModel = new DefaultListModel<String>();
		playerHandList.setModel(playerHandModel);
		playerHandList.setBounds(23, 43, 163, 247);
		stage.getContentPane().add(playerHandList);
		
		dealerHandList = new JList<String>();
		dealerHandList.setBorder(new LineBorder(new Color(0, 0, 0)));
		dealerHandModel = new DefaultListModel<String>();
		dealerHandList.setModel(dealerHandModel);
		dealerHandList.setBounds(498, 43, 163, 247);
		stage.getContentPane().add(dealerHandList);
		
		buttonPanel.add(play);
		buttonPanel.add(hit);
		buttonPanel.add(stand);
		
		playerValueLbl.setHorizontalAlignment(SwingConstants.CENTER);
		playerValueLbl.setBounds(23, 301, 163, 14);
		stage.getContentPane().add(playerValueLbl);
		
		dealerValueLbl.setHorizontalAlignment(SwingConstants.CENTER);
		dealerValueLbl.setBounds(498, 303, 156, 14);
		stage.getContentPane().add(dealerValueLbl);
		enableStartButton();
		
		play.addActionListener(new ActionListener() {
			@Override
			/**
			 * Annoymous Method for play button. Deals cards to
			 * player and dealer.
			 */
			public void actionPerformed(final ActionEvent e) {
				game.startGame();
				enableGameButtons();
				updateHandPlayer();
				dealerHandModel.clear();
				dealerHandModel.addElement(game.
						getPlayer(0).getHand().
						get(0).getCardString());
				dealerValueLbl.setText("?");
			}
		});
		
		hit.addActionListener(new ActionListener() {
			@Override
			/**
			 * Annoymous Method for the hit button. Deals a card
			 * to the active player.
			 */
			public void actionPerformed(final ActionEvent e) {
				game.hit();
				if (game.isBust(game.
						getPlayer(game.
								getTurnPlayer()
								))) {
					updateHandDealer();
					updateHandPlayer();
					endHand(true);
				} else {
					switch (game.getTurnPlayer()) {
						case 0:
							updateHandDealer();
							break;
							
						case 1:
							updateHandPlayer();
							break;
							
						default:
							break;
					}
				}
			}
		});
		
		stand.addActionListener(new ActionListener() {
			@Override
			/**
			 * Annoymous Method for the Stand Button. Ends the
			 * active player's turn.
			 */
			public void actionPerformed(final ActionEvent e) {
				switch (game.getTurnPlayer()) {
					case 0:
						endHand(false);
						break;
						
					case 1:
						game.stand();
						updateHandDealer();
						break;
						
					default:
						break;
				}
			}
		});
		
		stage.setDefaultCloseOperation(EXIT_ON_CLOSE);
		
	}
	
	/**
	 * Updates the player's JList and their value label.
	 */
	private void updateHandPlayer() {
		playerHandModel.clear();
		for (int i = 0; i < game.getPlayer(1).getHand().size(); i++) {
			playerHandModel.addElement(game.
					getPlayer(1).getHand().
					get(i).getCardString());
			playerValueLbl.setText("" 
					+ game.getHandValue(game.getPlayer(1)));
			if (game.isBlackJack(game.getPlayer(1))) {
				playerValueLbl.setText("BLACKJACK");
			}
		}
		
	}
	
	/**
	 * Updates the dealer's JList and their value label.
	 */
	private void updateHandDealer() {
		dealerHandModel.clear();
		for (int i = 0; i < game.getPlayer(0).getHand().size(); i++) {
			dealerHandModel.addElement(game.
					getPlayer(0).getHand().
					get(i).getCardString());
			dealerValueLbl.setText("" 
					+ game.getHandValue(game.getPlayer(0)));
			if (game.isBlackJack(game.getPlayer(0))) {
				dealerValueLbl.setText("BLACKJACK");
			}
		}
	}
	/**
	 * Determines who won the round and adds increments their win counter.
	 * @param bust Boolean for whether or not the hand was a bust.
	 */
	private void endHand(final boolean bust) {
		if (bust) {
			switch (game.getTurnPlayer()) {
				case 0:
					playerWinCount++;
					break;
				
				case 1:
					dealerWinCount++;
					break;
					
				default:
					break;
			}
		} else if (game.isDraw(game.getPlayer(1), game.getPlayer(0))) {
			System.out.println("draw");
		} else if (game.dealerWon(game.getPlayer(1), 
				game.getPlayer(0))) {
			dealerWinCount++;
		} else {
			playerWinCount++;
		}
		
		enableStartButton();
		game.gameReset();
		playerWinCountLbl.setText("Player Wins: " + playerWinCount);
		dealerWinCountLbl.setText("Dealer Wins: " + dealerWinCount);
	}
	
	/**
	 * Enable the Hit and Stand Buttons while disabling the play button.
	 */
	private void enableGameButtons() {
		hit.setEnabled(true);
		stand.setEnabled(true);
		play.setEnabled(false);
	}
	
	/**
	 * Enable the Play Button while disabling the Hit and Stand Buttons.
	 */
	private void enableStartButton() {
		play.setEnabled(true);
		hit.setEnabled(false);
		stand.setEnabled(false);
	}
	
	/**
	 * Method for returning the Jframe to the main class.
	 * 
	 * @return The Jframe Stage so the GUI can be ran from the main method.
	 */
	public JFrame frame() {
		return stage;
	}
}
